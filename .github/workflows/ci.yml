name: Build and test

env:
  DEBUG: napi:*
  APP_NAME: tantivy
  MACOSX_DEPLOYMENT_TARGET: 10.13
  NODE_VERSION: 16

on:
  push:
    branches: [main]
    paths-ignore:
      - .editorconfig
      - .gitignore
      - .github/workflows/lint.yml
      - .eslint*
      - LICENSE
      - rustfmt.toml
      - .prettierignore
    tags-ignore: ['*']
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - .editorconfig
      - .gitignore
      - .github/workflows/lint.yml
      - .eslint*
      - LICENSE
      - rustfmt.toml
      - .prettierignore

jobs:
  test-ts:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check types
        run: yarn check-ts

  build:
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=32;
              export CARGO_PROFILE_RELEASE_LTO=false
              yarn build --target i686-pc-windows-msvc
              # yarn test
            target: i686-pc-windows-msvc
            setup: |
              choco install nodejs-lts --x86 -y --force
              echo "C:\\Program Files (x86)\\nodejs" >> $GITHUB_PATH
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: |
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME $DOCKER_REGISTRY_URL --password-stdin
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder yarn build
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: |
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME $DOCKER_REGISTRY_URL --password-stdin
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder yarn build
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target=aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            setup: sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu -y
            build: yarn build --target=aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: yarn build --target=armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: |
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME $DOCKER_REGISTRY_URL --password-stdin
              docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/package-template -w /package-template builder sh -c "yarn build --target=aarch64-unknown-linux-musl"
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js v${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Pull latest image
        if: ${{ matrix.settings.docker }}
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup toolchain
        if: ${{ matrix.settings.setup }}
        shell: bash
        run: ${{ matrix.settings.setup }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build
        shell: bash
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  build-freebsd:
    if: github.event.pull_request.draft == false
    runs-on: macos-latest
    name: stable - x86_64-unknown-freebsd - node@16
    steps:
      - uses: actions/checkout@v2

      - name: Build
        uses: vmactions/freebsd-vm@v0.1.5
        env:
          RUSTUP_HOME: /usr/local/rustup
          CARGO_HOME: /usr/local/cargo
          RUSTUP_IO_THREADS: 1
        with:
          envs: DEBUG RUSTUP_HOME CARGO_HOME RUSTUP_IO_THREADS
          usesh: true
          mem: 3000
          prepare: |
            pkg install -y curl node python2
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
          run: |
            export PATH="/usr/local/cargo/bin:$PATH"
            node .yarn/releases/yarn-berry.cjs install --immutable
            node .yarn/releases/yarn-berry.cjs build
            # node .yarn/releases/yarn-berry.cjs test
            rm -rf node_modules
            rm -rf target

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-freebsd-x86_64-unknown-freebsd
          path: ${{ env.APP_NAME }}.*.node

  # test-macos-windows-binding:
  #   if: github.event.pull_request.draft == false
  #   needs: [build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #         - host: windows-latest
  #           target: x86_64-pc-windows-msvc
  #       node: [12, 14, 16]
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup Node.js v${{ matrix.node }}
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: Install dependencies
  #       run: yarn install --immutable

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: .

  #     - name: Test bindings
  #       run: yarn test

  # test-linux-x64-gnu-binding:
  #   if: github.event.pull_request.draft == false
  #   name: Test bindings on x86_64-unknown-linux-gnu - node@${{ matrix.node }}
  #   needs: [build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node: [12, 14, 16]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true

  #     - name: Install dependencies
  #       run: yarn install --immutable

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: .

  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/${{ env.APP_NAME }} -w /${{ env.APP_NAME }} node:${{ matrix.node }}-slim yarn test

  # test-linux-x64-musl-binding:
  #   if: github.event.pull_request.draft == false
  #   name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs: [build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node: [12, 14, 16]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup Node.js v${{ matrix.node }}
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: Install dependencies
  #       run: yarn install --immutable

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bindings-x86_64-unknown-linux-musl
  #         path: .

  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/${{ env.APP_NAME }} -w /${{ env.APP_NAME }} node:${{ matrix.node }}-alpine yarn test

  # test-linux-aarch64-gnu-binding:
  #   if: github.event.pull_request.draft == false
  #   name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
  #   needs: [build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node: [12, 14, 16]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

  #     - uses: actions/checkout@v2

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bindings-aarch64-unknown-linux-gnu
  #         path: .

  #     - name: Setup and run tests
  #       uses: docker://multiarch/ubuntu-core:arm64-focal
  #       with:
  #         args: >
  #           sh -c "
  #             apt-get update && \
  #             apt-get install -y ca-certificates gnupg2 curl apt-transport-https && \
  #             curl -sL https://deb.nodesource.com/setup_${{ matrix.node }}.x | bash - && \
  #             apt-get install -y nodejs && \
  #             node .yarn/releases/yarn-berry.cjs install --immutable && \
  #             node .yarn/releases/yarn-berry.cjs test
  #           "

  # test-linux-aarch64-musl-binding:
  #   if: github.event.pull_request.draft == false
  #   name: Test bindings on aarch64-unknown-linux-musl - node@lts
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

  #     - uses: actions/checkout@v2

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bindings-aarch64-unknown-linux-musl
  #         path: .

  #     - name: Setup and run tests
  #       uses: docker://multiarch/alpine:aarch64-latest-stable
  #       with:
  #         args: >
  #           sh -c "
  #             apk add nodejs && \
  #             node .yarn/releases/yarn-berry.cjs install --immutable && \
  #             node .yarn/releases/yarn-berry.cjs test
  #           "

  # test-linux-arm-gnueabihf-binding:
  #   if: github.event.pull_request.draft == false
  #   needs: [build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node: [12, 14, 16]
  #   runs-on: ubuntu-latest
  #   name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
  #   steps:
  #     - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

  #     - uses: actions/checkout@v2

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bindings-armv7-unknown-linux-gnueabihf
  #         path: .

  #     - name: Setup and run tests
  #       uses: docker://multiarch/ubuntu-core:armhf-focal
  #       with:
  #         args: >
  #           sh -c "
  #             apt-get update && \
  #             apt-get install -y ca-certificates gnupg2 curl apt-transport-https && \
  #             curl -sL https://deb.nodesource.com/setup_${{ matrix.node }}.x | bash - && \
  #             apt-get install -y nodejs && \
  #             node .yarn/releases/yarn-berry.cjs install --immutable && \
  #             node .yarn/releases/yarn-berry.cjs test
  #           "

  release-please:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs:
      - test-ts
      # - test-linux-x64-gnu-binding
      # - test-linux-x64-musl-binding
      # - test-linux-aarch64-gnu-binding
      # - test-linux-arm-gnueabihf-binding
      # - test-macos-windows-binding
      # - test-linux-aarch64-musl-binding
      - build-freebsd
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js v${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: yarn install --immutable

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - uses: GoogleCloudPlatform/release-please-action@v2
        id: release
        with:
          release-type: node
          pull-request-title-pattern: 'chore${scope}: release${component} v${version}'
          bump-minor-pre-major: true
          default-branch: main
          changelog-types: '[{"type":"feat","section":"Features"},{"type":"fix","section":"Bug Fixes"},{"type":"perf","section":"Performance Improvements"},{"type":"deps","section":"Dependencies"},{"type":"revert","section":"Reverts"},{"type":"docs","section":"Documentation","hidden":true},{"type":"style","section":"Styles","hidden":true},{"type":"chore","section":"Miscellaneous Chores","hidden":true},{"type":"refactor","section":"Code Refactoring","hidden":true},{"type":"test","section":"Tests","hidden":true},{"type":"ci","section":"Continuous Integration","hidden":true}]'

      - name: Publish to NPM
        if: ${{ steps.release.outputs.release_created }}
        run: yarn npm publish
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
